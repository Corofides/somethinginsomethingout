---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jameslendrem.
--- DateTime: 24/03/2024 10:43
---

local pd <const> = playdate
local gfx <const> = pd.graphics

class("View").extends(gfx.sprite)

function View:init(content, params)

    self._defaultParams = {
        width = "auto",
        borderTopColor = gfx.kColorBlack,
        borderBottomColor = gfx.kColorBlack,
        borderLeftColor = gfx.kColorBlack,
        borderRightColor = gfx.kColorBlack,
        borderTopWidth = 0,
        borderBottomWidth = 0,
        borderLeftWidth = 0,
        borderRightWidth = 0,
        borderTopLeftRadius = 0,
        borderTopRightRadius = 0,
        borderBottomLeftRadius = 0,
        borderBottomRightRadius = 0,
        borderCollapse = false,
        paddingTop = 0,
        paddingLeft = 0,
        paddingBottom = 0,
        paddingRight = 0,
        marginTop = 0,
        marginLeft = 0,
        marginBottom = 0,
        marginRight = 0,
        top = 0,
        left = 0,
        color = gfx.kColorBlack,
    }

    self.params = self:inflateParams(params);
    self.content = content;

end

function View:getOuterHeight()

    local height = self:getInnerHeight();

    height = height + self.params.marginTop;
    height = height + self.params.marginBottom;

    return height;

end

function View:getOuterWidth()

    local width = self:getInnerWidth()

    width = width + self.params.marginLeft
    width = width + self.params.marginRight

    return width;

end

function View:getInnerHeight()

    local height = 0

    height = height + self.params.borderTopWidth
    height = height + self.params.borderBottomWidth
    height = height + self.params.paddingTop
    height = height + self.params.paddingBottom

    if (type(self.content) == "table") then

        if (is_array(self.content)) then

            for key, value in pairs(self.content) do
                height = height + value:getOuterHeight()
                height = height - self:getBorderCollapseOffset("vertical", key)
            end

        else
            height = height + self.content:getHeight();
        end
    end

    if (type(self.content) == "string") then
        local font <const> = gfx.getFont()
        height = height + font:getHeight()
    end

    return height
end

function View:getInnerWidth()

    local width = 0

    print("Type of Width", type(self.params.width));

    if (type(self.params.width) == "number") then
        return self.params.width;
    end

    --- do the other stuff

    width = width + self.params.borderLeftWidth
    width = width + self.params.borderRightWidth
    width = width + self.params.paddingLeft
    width = width + self.params.paddingRight

    -- Assume view for now
    if (type(self.content) == "table") then

        if (is_array(self.content)) then

            local maxWidth = 0

            for key, value in pairs(self.content) do

                local outerWidth <const> = value:getOuterWidth()

                if outerWidth > maxWidth then
                    maxWidth = outerWidth
                end

            end

            width = width + maxWidth
            -- Do stuff
        else
            width = width + self.content:getWidth();
        end

    end

    if (type(self.content) == "string") then
        local font <const> = gfx.getFont()
        width = width + font:getTextWidth(self.content)
    end

    print("Width", width)

    return width
end

function View:_calculateBorderStartAndLength(initialLength, startBorderWidth, startBorderRadius, endBorderWidth, endBorderRadius)

    local borderStart = 0;
    local borderLength = initialLength;

    if (startBorderWidth) then
        borderStart = startBorderWidth
        borderLength = borderLength - startBorderWidth;
    end

    if (startBorderRadius > 0) then
        borderStart = startBorderRadius
        borderLength = initialLength - startBorderRadius
    end

    if (endBorderRadius > 0) then
        borderLength = borderLength - endBorderRadius
    else
        borderLength = borderLength - endBorderWidth
    end

    return borderStart, borderLength

end

function View:_drawBorderRight()

    local width <const> = self:getInnerWidth()
    local height <const> = self:getInnerHeight()

    if (self.params.borderRightWidth <= 0) then
        return;
    end

    local oldColor = gfx.getColor()
    gfx.setColor(self.params.borderRightColor)

    if (self.params.borderRightWidth > 0) then
        local borderStart, borderLength = self:_calculateBorderStartAndLength(height, self.params.borderTopWidth, self.params.borderTopRightRadius, self.params.borderBottomWidth, self.params.borderBottomRightRadius)
        gfx.fillRect(width - self.params.borderRightWidth, borderStart, width, borderLength)
    end

    if (self.params.borderTopWidth > 0) then
        if (self.params.borderTopRightRadius > 0) then
            for i=0, self.params.borderRightWidth - 1, 1 do
                gfx.drawArc((width - self.params.borderTopRightRadius), self.params.borderTopRightRadius, self.params.borderTopRightRadius - i, 45, 90)
            end
        else
            gfx.fillTriangle(width, 0, width, self.params.borderTopWidth, width - self.params.borderRightWidth, self.params.borderTopWidth)
        end
    end

    if (self.params.borderBottomWidth > 0) then
        if (self.params.borderBottomRightRadius > 0) then
            for i=0, self.params.borderRightWidth - 1, 1 do
                gfx.drawArc((width - self.params.borderBottomRightRadius), height - self.params.borderBottomRightRadius, self.params.borderBottomRightRadius - i, 90, 135)
            end
        else
            gfx.fillTriangle(width, height, width, height - self.params.borderBottomWidth, width - self.params.borderRightWidth, height - self.params.borderBottomWidth)
        end
    end

    gfx.setColor(oldColor)

end

function View:_drawBorderLeft()

    local width <const> = self:getInnerWidth()
    local height <const> = self:getInnerHeight()

    if (self.params.borderLeftWidth <= 0) then
        return;
    end

    local oldColor = gfx.getColor();
    gfx.setColor(self.params.borderLeftColor)

    local borderStart, borderLength = self:_calculateBorderStartAndLength(height, self.params.borderTopWidth, self.params.borderTopLeftRadius, self.params.borderBottomWidth, self.params.borderBottomLeftRadius)
    gfx.fillRect(0, borderStart, self.params.borderLeftWidth, borderLength)

    if (self.params.borderTopWidth > 0) then

        if (self.params.borderTopLeftRadius > 0) then
            for i=0, self.params.borderLeftWidth - 1, 1 do
                gfx.drawArc(self.params.borderTopLeftRadius, self.params.borderTopLeftRadius, self.params.borderTopLeftRadius - i, 270, 315)
            end
        else
            gfx.fillTriangle(0, 0, 0, self.params.borderTopWidth, self.params.borderLeftWidth, self.params.borderTopWidth)
        end

    end

    if (self.params.borderBottomWidth > 0) then
        if (self.params.borderBottomLeftRadius > 0) then
            for i=0, self.params.borderLeftWidth - 1 do
                gfx.drawArc(self.params.borderBottomLeftRadius, height - self.params.borderBottomLeftRadius, self.params.borderBottomLeftRadius - i, 225, 270)
            end
        else
            gfx.fillTriangle(0, height, 0,  height - self.params.borderBottomWidth, self.params.borderLeftWidth, height - self.params.borderBottomWidth)
        end
    end

    gfx.setColor(oldColor)

end

function View:_drawBorderBottom()

    local width <const> = self:getInnerWidth()
    local height <const> = self:getInnerHeight()

    if (self.params.borderBottomWidth <= 0) then
        return;
    end

    local oldColor = gfx.getColor();
    gfx.setColor(self.params.borderBottomColor)

    local borderStart, borderLength = self:_calculateBorderStartAndLength(width, self.params.borderLeftWidth, self.params.borderBottomLeftRadius, self.params.borderRightWidth, self.params.borderBottomRightRadius)
    gfx.fillRect(borderStart, height - self.params.borderBottomWidth, borderLength, self.params.borderBottomWidth)

    if (self.params.borderLeftWidth > 0) then
        if (self.params.borderBottomLeftRadius > 0) then
            for i=0, self.params.borderBottomWidth - 1 do
                gfx.drawArc(self.params.borderBottomLeftRadius, height - self.params.borderBottomLeftRadius, self.params.borderBottomLeftRadius - i, 180, 225)
            end
        else
            gfx.fillTriangle(0, height, self.params.borderLeftWidth, height, self.params.borderLeftWidth, height - self.params.borderBottomWidth)
        end
    end

    if (self.params.borderRightWidth > 0) then
        if (self.params.borderBottomRightRadius > 0) then
            for i=0, self.params.borderBottomWidth - 1, 1 do
                gfx.drawArc((width - self.params.borderBottomRightRadius), height - self.params.borderBottomRightRadius, self.params.borderBottomRightRadius - i, 135, 188)
            end
        else
            gfx.fillTriangle(width, height, width - self.params.borderRightWidth, height, width - self.params.borderRightWidth, height - self.params.borderBottomWidth);
        end
    end

    gfx.setColor(oldColor)
end

function View:_drawBorderTop()

    local width <const> = self:getInnerWidth()
    local height <const> = self:getInnerHeight()

    if (self.params.borderTopWidth <= 0) then
        return;
    end

    local borderStart, borderLength = self:_calculateBorderStartAndLength(width, self.params.borderLeftWidth, self.params.borderTopLeftRadius, self.params.borderRightWidth, self.params.borderTopRightRadius)
    local oldColor = gfx.getColor();

    gfx.setColor(self.params.borderTopColor)
    gfx.fillRect(borderStart, 0, borderLength, self.params.borderTopWidth)

    if (self.params.borderLeftWidth > 0) then
        if (self.params.borderTopLeftRadius > 0) then
            for i = 0, self.params.borderTopWidth - 1, 1 do
                gfx.drawArc(self.params.borderTopLeftRadius, self.params.borderTopLeftRadius, self.params.borderTopLeftRadius - i, 315, 0)
            end
        else
            gfx.fillTriangle(0, 0, self.params.borderLeftWidth, 0, self.params.borderLeftWidth, self.params.borderTopWidth)
        end
    end

    if (self.params.borderRightWidth > 0) then

        if (self.params.borderTopRightRadius > 0) then
            for i=0, self.params.borderTopWidth - 1, 1 do
                gfx.drawArc((width - self.params.borderTopRightRadius), self.params.borderTopRightRadius, self.params.borderTopRightRadius - i, 0, 45)
            end
        else
            gfx.fillTriangle(width, 0, width - self.params.borderRightWidth, 0, width - self.params.borderRightWidth, self.params.borderTopWidth)
        end

    end

    gfx.setColor(oldColor)


end

function View:drawBorders()

    local width <const> = self:getInnerWidth()
    local height <const> = self:getInnerHeight()

    print("borderTopRightRadius", width, self.params.borderTopRightRadius)

    self:_drawBorderTop()
    self:_drawBorderBottom()
    self:_drawBorderLeft()
    self:_drawBorderRight()

    if (self.params.borderTopWidth > 0 and self.params.borderRightWidth > 0) then

        if (self.params.borderTopRightRadius > 0) then
            -- Top Right - Top of Arc
            --[[ for i=0, self.params.borderTopWidth - 1, 1 do
                gfx.drawArc((width - self.params.borderTopRightRadius), self.params.borderTopRightRadius, self.params.borderTopRightRadius - i, 0, 45)
            end ]]--
            -- Top Right - Bottom of Arc
            --[[ for i=0, self.params.borderRightWidth - 1, 1 do
                gfx.drawArc((width - self.params.borderTopRightRadius), self.params.borderTopRightRadius, self.params.borderTopRightRadius - i, 45, 90)
            end ]]--
        else
            -- Border Top - Right
            -- gfx.fillTriangle(width, 0, width - self.params.borderRightWidth, 0, width - self.params.borderRightWidth, self.params.borderTopWidth)
            -- Border Right - Top
            -- gfx.fillTriangle(width, 0, width, self.params.borderTopWidth, width - self.params.borderRightWidth, self.params.borderTopWidth)
        end
    end

    if (self.params.borderBottomWidth > 0 and self.params.borderRightWidth > 0) then

        if (self.params.borderBottomRightRadius > 0) then
            -- Bottom Right - Top of Arc
            --[[ for i=0, self.params.borderRightWidth - 1, 1 do
                gfx.drawArc((width - self.params.borderBottomRightRadius), height - self.params.borderBottomRightRadius, self.params.borderBottomRightRadius - i, 90, 135)
            end ]]--
            -- Bottom Right - Bottom of Arc
            --[[for i=0, self.params.borderBottomWidth - 1, 1 do
            --                gfx.drawArc((width - self.params.borderBottomRightRadius), height - self.params.borderBottomRightRadius, self.params.borderBottomRightRadius - i, 135, 188)
            --            end
            ]]--
        else
            -- Border Right - Bottom
            -- gfx.fillTriangle(width, height, width, height - self.params.borderBottomWidth, width - self.params.borderRightWidth, height - self.params.borderBottomWidth)
            -- Border Bottom - Right
            -- gfx.fillTriangle(width, height, width - self.params.borderRightWidth, height, width - self.params.borderRightWidth, height - self.params.borderBottomWidth);
        end
    end

end

function View:getBorderCollapseOffset(direction, key)

    if (not self.params.borderCollapse) then
        return 0
    end

    if (key == #self.content) then
        return 0
    end

    local currentBorderProperty = "borderBottomWidth"
    local nextBorderProperty = "borderTopWidth"

    if (direction == "horizontal") then
        currentBorderProperty = "borderRightWidth"
        nextBorderProperty = "borderLeftWidth"
    end

    local nextChildTopBorderWidth = self.content[key].params[nextBorderProperty]
    local smallestBorderWidth = self.params[currentBorderProperty]

    if (nextChildTopBorderWidth < smallestBorderWidth) then
        smallestBorderWidth = nextChildTopBorderWidth
    end

    return smallestBorderWidth

end

function View:setChildInnerViewWidth(isMultiple)

    if (not isMultiple) then

        if (self.content.params.width == "100%") then
            self.content:setParam("width", self:getInnerWidth())
        end

    end

    for key, value in pairs(self.content) do

        if (value.params.width == "100%") then
            self.content.setParam("width", self:getInnerWidth())
        end

    end

end

function View:drawArrayOfViews(contentPositionLeft, contentPositionTop)

    local positionX = self.params.left + self.params.borderLeftWidth + self.params.paddingLeft;
    local positionY = self.params.top + self.params.borderTopWidth + self.params.paddingTop;

    for key, value in pairs(self.content) do

        local isPercent = false
        value:setParam("top", positionY)
        value:setParam("left", positionX)

        if (value.params.width == "100%") then
            value.params.width = self:getInnerWidth() - self.params.borderLeftWidth - self.params.borderRightWidth
                - self.params.paddingLeft - self.params.paddingRight

            isPercent = true;
        end

        value:drawView()

        if (isPercent) then
            value.params.width = "100%"
        end

        positionY = positionY + value:getOuterHeight()
        positionY = positionY - self:getBorderCollapseOffset("vertical", key);

    end

end

function View:drawInnerContent()

    local contentPositionLeft = self.params.borderLeftWidth + self.params.paddingLeft;
    local contentPositionTop = self.params.borderTopWidth + self.params.paddingTop;

    if (type(self.content) == "string") then
        gfx.drawText(self.content, contentPositionLeft, contentPositionTop)
        return;
    end

    if (type(self.content) == "table") then

        if (not is_array(self.content)) then
            self.content:drawView();
        end

        self:drawArrayOfViews(contentPositionLeft, contentPositionTop)

    end

end

function View:drawView()

    local width <const> = self:getInnerWidth()
    local height <const> = self:getInnerHeight()

    local viewImage = gfx.image.new(width, height);

    gfx.pushContext(viewImage)

    self:drawBorders()
    self:drawInnerContent()

    gfx.popContext()

    local topPosition = self.params.top + self.params.marginTop
    local leftPosition = self.params.left + self.params.marginLeft

    self:setCenter(0, 0)
    self:setImage(viewImage)
    self:moveTo(leftPosition, topPosition)
    self:add()

end

function View:printParams()

    for key, value in pairs(self.params) do
        print(key, ":", value)
    end

end

function View:inflateParams(params)

    local inflatedParams = {};

    for key, value in pairs(self._defaultParams) do
        inflatedParams[key] = value;
    end

    for key, value in pairs(params) do
        inflatedParams[key] = value;
    end

    return inflatedParams;

end

function View:setParam(name, value)
    self.params[name] = value;
end

function View:getParams()
    return self.params;
end